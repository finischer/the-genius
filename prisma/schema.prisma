// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  role          UserRole?    @default(USER)
  email         String       @unique
  emailVerified DateTime?
  password      String
  image         String?
  gameshows     Gameshow[]   @relation(name: "gameshowCreator")
  friends       Friendship[] @relation(name: "users")
  friendOf      Friendship[] @relation(name: "friendUsers")
  roomsOpen     Room[]       @relation(name: "roomCreator")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("users")
}

model Gameshow {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  games      Json[]
  creatorId  String   @db.ObjectId
  user       User     @relation("gameshowCreator", fields: [creatorId], references: [id])
  isFavorite Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("gameshows")
}

model Friendship {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  friendId  String   @db.ObjectId
  user      User     @relation("users", fields: [userId], references: [id])
  friend    User     @relation("friendUsers", fields: [friendId], references: [id])
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("friendships")
}

model Room {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  modus             GameshowMode
  roomSize          Int          @default(12)
  participants      String[]     @default([])
  password          String?
  isPrivate         Boolean      @default(true)
  currentGame       String?
  creator           User         @relation("roomCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId         String       @db.ObjectId
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  games             Json[]
  defaultGameStates Json[]
  teams             Json[]

  @@map("rooms")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

enum UserRole {
  USER
  ADMIN
  PREMIUM
}

enum GameshowMode {
  DUELL
  TEAM
}
